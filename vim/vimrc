set modelines=1
" Color {{{
set t_Co=256			" Enable 256 color mode
set background=dark     " Use a dark background
syntax enable			" Enable syntax processing
let &t_ut=''            " Force vim to erase background color
:silent! colorscheme monokai     " Set colorscheme to monokai if present, otherwise do nothing
" }}}

" Spaces & Tabs {{{
set tabstop=4			" Number of visual spaces per TAB
set softtabstop=4		" Number of spaces in TAB when editing
set shiftwidth=4		" indenting uses 4 spaces
set expandtab			" TAB -> Space
" }}}

" UI Config {{{
set number			" Show line numbers
set relativenumber  " Show relative line numbers
set showcmd			" Show last command in bottom bar
set cursorline		" Highlight current line

set colorcolumn=100	" Show column at line character limit
highlight ColorColumn ctermbg=darkgrey

set autoindent              " Automatically continues indentation
filetype plugin indent on	" Load file type-specific indent files

set wildmenu		" Visual Autocomplete for command menu
set wildmode=longest:full,full " Only complete to longest match, but switch to full if <TAB><TAB>

set showmatch		" Highlight matching parenthesis

set splitright		" Open new vertical split to the right

set scrolloff=10    " Try to keep 20 lines up/down from the current line in the display

set listchars=tab:¦·,trail:·,nbsp:· " Show whitespace characters
" }}}

" Searching {{{
set incsearch		" Search as characters are entered
set hlsearch		" Highlight search matches
set smartcase       " Search Case insensitive, if no upper case is used
" }}}

" Folding {{{
set foldenable		    " enable folding
set foldlevelstart=10   " open folds up to x levels
set foldnestmax=10	    " Max x nested folds
set foldmethod=syntax   " fold based on syntax
" }}}

" Autocommands {{{
" Full Text {{{
augroup FullText
    autocmd FileType tex,markdown hi clear SpellBad  " Clear current spellBad highlighting
    autocmd FileType tex,markdown hi SpellBad cterm=underline ctermfg=red  " Use a red underline for highlighting
    autocmd FileType tex,markdown setlocal spell spelllang=en_us " Use english spell checking in tex files

    autocmd FileType tex,markdown setlocal textwidth=100 " Wrap text after 100 characters
    autocmd FileType tex,markdown setlocal wrap linebreak nolist
augroup END
" }}}
" Git {{{
augroup Git 
    autocmd FileType gitcommit hi clear SpellBad  " Clear current spellBad highlighting
    autocmd FileType gitcommit hi SpellBad cterm=underline ctermfg=red  " Use a red underline for highlighting
    autocmd FileType gitcommit setlocal spell spelllang=en_us " Use english spell checking in tex files
    autocmd FileType gitcommit setlocal textwidth=72 " Wrap text after 72 characters
    autocmd FileType gitcommit setlocal wrap linebreak nolist
" }}}
" }}}

" Custom Functions {{{
" Switch relative/absolute line numbers
func! NumberToggle()
    if(&relativenumber == 1)
        set number
        set norelativenumber
    else
        set nonumber
        set relativenumber
    endif
endfunc

func! RemoveTrailingWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfunc

func! WhitespaceShowToggle()
    set list!
endfunc

" }}}

" Custom Commands {{{
command Term vert term++close
command! RemoveTrailingWhitespace call RemoveTrailingWhitespace()
" }}}

" Misc {{{
set clipboard=unnamedplus	" Set global clipboard
set encoding=utf-8		    " Set encoding to utf-8

set backup		            " keep a backup file (restore to previous version)
set directory=~/.vim/tmp	" Set .swp directory
set backupdir=~/.vim/backup " Set .bak directory
set backupext=.bak          " Backup files are postfixed with .bak
if has('persistent_undo')
    set undodir=~/.vim/tmp  " Set dir for undo files
    set undofile	        " keep an undo file (undo changes after closing)
endif
" }}}

" Plugins {{{
" Vim Plugins
" MatchIt {{{
if has('syntax') && has('eval')
    packadd! matchit " % matches more than just brackets
endif
" }}}
" vim-plug plugin
call plug#begin()
" Monokai Colorscheme {{{
Plug 'crusoexia/vim-monokai', {'frozen': 1}
" }}}
" vim fugitive {{{
Plug 'tpope/vim-fugitive', {'frozen': 1}
" }}}
" vim auto git diff {{{
Plug 'hotwatermorning/auto-git-diff', {'frozen': 1}
" }}}
" Air Line {{{
Plug 'vim-airline/vim-airline', {'frozen': 1}
Plug 'vim-airline/vim-airline-themes', {'frozen': 1}
let g:airlinie#extensions#branch#enable=1
let g:airline_powerline_fonts=1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" }}}
" fzf {{{
Plug 'junegunn/fzf', { 'do': { -> fzf#install() }, 'frozen': 1}
Plug 'junegunn/fzf.vim', {'frozen': 1}

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" }}}
" Vim Wiki {{{
Plug 'vimwiki/vimwiki', {'frozen': 1}
let wiki = {}
let wiki.nested_syntaxes = {'python' : 'python', 'c' : 'c'} " Activate syntax highlighting in vimwiki
let g:vimwiki_list=[{'path' : '~/Documents/vimwiki', 'path_html' : '~/Documents/vimwiki/html_out'}]
" }}}
" Dart {{{
Plug 'dart-lang/dart-vim-plugin', {'frozen': 1}
" }}}
" Coc {{{
Plug 'neoclide/coc.nvim', {'branch': 'release', 'frozen': 1} " IntelSense Engine for Vim
" Plugins {{{
Plug 'lervag/vimtex', {'frozen': 1}
let g:tex_flavor = 'latex' " make vimtex use latex
" }}}
let g:coc_global_extensions = [
\   'coc-clangd',
\   'coc-git',
\   'coc-json',
\   'coc-python',
\   'coc-rust-analyzer',
\   'coc-snippets',
\   'coc-vimtex',
\   'coc-flutter']
set statusline ^=%{coc#status()}
highlight CocInfoFloat ctermfg=Black guifg=#353b45

inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1) :
    \ CheckBackspace() ? "\<Tab>" :
    \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
    \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)
" }}}
" Rust {{{
Plug 'rust-lang/rust.vim', {'frozen': 1}
" }}}
" Easy Motion {{{
Plug 'easymotion/vim-easymotion', {'frozen': 1}
let g:EasyMotion_smartcase = 1
" }}}
" Secure Modelines {{{
Plug 'ypcrts/securemodelines', {'frozen': 1}
let g:secure_modelines_verbose = 1 " Warn if illegal modelines are present
let g:secure_modelines_allowed_items = [
\   "foldmethod",
\   "foldlevel"
\   ]
" }}}
call plug#end()
" Vundle plugin end
filetype plugin on      " Enable filetype pluins
" }}}

" Startup {{{
" }}}

"Remappings {{{
" Command Mode {{{
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!
" }}}
" Movement {{{
" Remap buffer switching
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Remap movement for wrapped lines
nnoremap j gj
nnoremap k gk
" }}}
" Functions {{{
" Turn off search highlight
nnoremap <C-x> :nohlsearch<CR>
" Switch between relative and absolut line numbers
nnoremap <NUL> :call NumberToggle()<CR>
" Switch between visible and invisible whitespace
nnoremap <C-c> :call WhitespaceShowToggle()<CR>
" space open/closes folds
nnoremap <space> za
" Insert current date in ISO Format
nnoremap <F5> "=strftime("%F")<CR>P
inoremap <F5> <C-R>=strftime("%F")<CR>
" }}}
" Plugins {{{
" FZF {{{
nnoremap <C-?> :FZF <cr>
" }}}
" Coc {{{
nnoremap gd :call CocActionAsync('jumpDefinition', 'tab drop')<CR>
nnoremap gr :call CocActionAsync('jumpReferences', 'tab drop')<CR>
nnoremap gi :call CocActionAsync('jumpImplementation', 'tab drop')<CR>
" Autocomplete on Enter (<cr>) pressed
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
" Jump between placeholders in insert mode
let g:coc_snippet_next = '<c-l>'
let g:coc_snippet_prev = '<c-h>'
" }}}
" Easy Motion {{{
map <Leader> <Plug>(easymotion-prefix)
nmap f <Plug>(easymotion-fl)
nmap F <Plug>(easymotion-Fl)
" }}}
" }}}
" }}}
" vim:foldmethod=marker:foldlevel=0
